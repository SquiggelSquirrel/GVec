@tool
class_name GVecPathNested
extends GVecPath

## Base resource for a [GVecPath] that contains another [GVecPath].
##
## This is an abstract class, not intended for direct instantiation.
## It represents a [GVecPath] resource that holds a reference to another
## [GVecPath] resource, typically it will generate baked points by
## applying some modification to the baked points of the referenced path.


## This signal is fired when [member path] changes to reference a different
## [GVecPath], or when the structure of nested [GVecPath] resources changes.
signal structure_changed

## The GVecPath that this resource contains
@export var path: GVecPath = GVecPathSVG.new():
	set(value):
		assert( ! value.contains_path(self))
		GVec.disconnect_if_able(path, "changed", _on_path_changed)
		GVec.disconnect_if_able(path, "path_changed", _on_structure_changed)
		path = value
		GVec.connect_if_able(path, "changed", _on_path_changed)
		GVec.connect_if_able(path, "path_changed", _on_structure_changed)
		_on_structure_changed()
		_on_path_changed()


## Test if this path contains a dependency on another path
## - used to prevent cyclic references
func contains_path(test_path: GVecPath) -> bool:
	if path == test_path or path.contains_path(test_path):
		return true
	return false


# Meta property used for SVGTools plugin
func _init():
	set_meta("_svg_tools_path_property", "path")


func get_segment_count() -> int:
	if path == null:
		return 0
	return path.get_segment_count()


## Implementing sub-classes can extend this method, it defines some operation
## to be applied to a [PackedVector2Array] of points generated by the
## referenced [GVecPath].
func modify_points(points_in: PackedVector2Array) -> PackedVector2Array:
	return points_in


func _calculate_baked_points() -> PackedVector2Array:
	if path == null:
		return PackedVector2Array()
	return modify_points(path.get_baked_points())


func _calculate_segment_baked_points(segment_index: int) -> PackedVector2Array:
	if path == null:
		return PackedVector2Array()
	return modify_points(path.get_segment_baked_points(segment_index))


func _on_path_changed() -> void:
	if caching_enabled:
		cache_clear()
	emit_changed()


func _on_structure_changed():
	structure_changed.emit()
