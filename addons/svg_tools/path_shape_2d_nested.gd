@tool
class_name PathShape2DNested
extends PathShape2D

## Base resource for a [PathShape2D] that contains another [PathShape2D].
##
## This is an abstract class, not intended for direct instantiation.
## It represents a [PathShape2D] resource that holds a reference to another
## [PathShape2D] resource, typically it will generate baked points by
## applying some modification to the baked points of the referenced path.


## The PathShape2D that this resource contains
@export var path :PathShape2D = PathShape2DSVG.new():
	set(value):
		if value != path and path != null:
			if path.changed.is_connected(_on_path_changed):
				path.changed.disconnect(_on_path_changed)
		path = value
		if path != null:
			if ! path.changed.is_connected(_on_path_changed):
				path.changed.connect(_on_path_changed)
		_on_path_changed()


# Meta property used for SVGTools plugin
func _init():
	set_meta("_svg_tools_path_property", "path")


func get_segment_count() -> int:
	if path == null:
		return 0
	return path.get_segment_count()


## Implementing sub-classes can extend this method, it defines some operation
## to be applied to a [PackedVector2Array] of points generated by the
## referenced [PathShape2D].
func modify_points(points_in :PackedVector2Array) -> PackedVector2Array:
	return points_in


func _calculate_baked_points() -> PackedVector2Array:
	if path == null:
		return PackedVector2Array()
	return modify_points(path.get_baked_points())


func _calculate_segment_baked_points(segment_index :int) -> PackedVector2Array:
	if path == null:
		return PackedVector2Array()
	return modify_points(path.get_segment_baked_points(segment_index))


func _on_path_changed() -> void:
	if caching_enabled:
		cache_clear()
	emit_changed()
